;; Chem
;;
;; Origin: COCONUT
;; 5 equations defined by:
;;
;; 3*y5 - y1*(y2 + 1)=0
;; y2*(2*y1 + y3^2 + r8 + 2*r10*y2 + r7*y3 + r9*y4) +y1 - r*y5=0
;; y3*(2*y2*y3 + 2*r5*y3 + r6 + r7*y2) - 8*y5=0
;; y4*(r9*y2 + 2*y4) - 4*r*y5=0
;; y2*(y1+r10*y2+y3^2+r8+r7*y3+r9*y4)+y1+r5*y3^2+y4^2-1+r6*y3=0
;;
;; with
;;
;;  r = 10
;;  r5 = 0.193
;;  r6 = 0.002597/sqrt(40.)
;;  r7 = 0.003448/sqrt(40.)
;;  r8 = 0.00001799/40.
;;  r9 = 0.0002155/sqrt(40.)
;;  r10= 0.00003846/40.
;;
;; Ranges: for all unknowns [0,1e8] or [-1e8,1e8]
;;
;; Solving method: GradientSolve+HullConsistencyStrong+3B
;; Solutions:: 1 for range [0,1e8], 4 for range [-1e8,1e8] (exact)
;; Computation time (May 2004):
;; DELL D400 (1.7 GHz) 	0.05s (range =[0,1e8]), 0.5s (range =[-1e8,1e8])

(FPCore chem_1 (y1 y2 y3 y4 y5)
        :name "chem 1"
        :pre (and (<= (- 1e8) y1 1e8) (<= (- 1e8) y2 1e8) (<= (- 1e8) y3 1e8) (<= (- 1e8) y4 1e8) (<= 1e8 y5 1e8))

        (let ([r 10]) (let ([r5 0.193]) (let ([r6 (/ 0.002597 (sqrt 40.))]) (let ([r7 (/ 0.003448 (sqrt 40.))]) (let ([r8 (/ 0.00001799 40.)]) (let ([r9 (/ 0.0002155 (sqrt 40.))]) (let ([r10 (/ 0.00003846 40.)]) (- (* 3 y5) (* y1 (+ y2 1)))))))))))

(FPCore chem_2 (y1 y2 y3 y4 y5)
        :name "chem 2"
        :pre (and (<= (- 1e8) y1 1e8) (<= (- 1e8) y2 1e8) (<= (- 1e8) y3 1e8) (<= (- 1e8) y4 1e8) (<= 1e8 y5 1e8))

        (let ([r 10]) (let ([r5 0.193]) (let ([r6 (/ 0.002597 (sqrt 40.))]) (let ([r7 (/ 0.003448 (sqrt 40.))]) (let ([r8 (/ 0.00001799 40.)]) (let ([r9 (/ 0.0002155 (sqrt 40.))]) (let ([r10 (/ 0.00003846 40.)]) (- (+ (* y2 (+ (+ (+ (+ (+ (* 2 y1) (pow y3 2)) r8) (* (* 2 r10) y2)) (* r7 y3)) (* r9 y4))) y1) (* r y5))))))))))

(FPCore chem_3 (y1 y2 y3 y4 y5)
        :name "chem 3"
        :pre (and (<= (- 1e8) y1 1e8) (<= (- 1e8) y2 1e8) (<= (- 1e8) y3 1e8) (<= (- 1e8) y4 1e8) (<= 1e8 y5 1e8))

        (let ([r 10]) (let ([r5 0.193]) (let ([r6 (/ 0.002597 (sqrt 40.))]) (let ([r7 (/ 0.003448 (sqrt 40.))]) (let ([r8 (/ 0.00001799 40.)]) (let ([r9 (/ 0.0002155 (sqrt 40.))]) (let ([r10 (/ 0.00003846 40.)]) (- (* y3 (+ (+ (+ (* (* 2 y2) y3) (* (* 2 r5) y3)) r6) (* r7 y2))) (* 8 y5))))))))))

(FPCore chem_4 (y1 y2 y3 y4 y5)
        :name "chem 4"
        :pre (and (<= (- 1e8) y1 1e8) (<= (- 1e8) y2 1e8) (<= (- 1e8) y3 1e8) (<= (- 1e8) y4 1e8) (<= 1e8 y5 1e8))

        (let ([r 10]) (let ([r5 0.193]) (let ([r6 (/ 0.002597 (sqrt 40.))]) (let ([r7 (/ 0.003448 (sqrt 40.))]) (let ([r8 (/ 0.00001799 40.)]) (let ([r9 (/ 0.0002155 (sqrt 40.))]) (let ([r10 (/ 0.00003846 40.)]) (- (* y4 (+ (* r9 y2) (* 2 y4))) (* (* 4 r) y5))))))))))

(FPCore chem_5 (y1 y2 y3 y4 y5)
        :name "chem 5"
        :pre (and (<= (- 1e8) y1 1e8) (<= (- 1e8) y2 1e8) (<= (- 1e8) y3 1e8) (<= (- 1e8) y4 1e8) (<= 1e8 y5 1e8))

        (let ([r 10]) (let ([r5 0.193]) (let ([r6 (/ 0.002597 (sqrt 40.))]) (let ([r7 (/ 0.003448 (sqrt 40.))]) (let ([r8 (/ 0.00001799 40.)]) (let ([r9 (/ 0.0002155 (sqrt 40.))]) (let ([r10 (/ 0.00003846 40.)]) (+ (- (+ (+ (+ (* y2 (+ (+ (+ (+ (+ y1 (* r10 y2)) (pow y3 2)) r8) (* r7 y3)) (* r9 y4))) y1) (* r5 (pow y3 2))) (pow y4 2)) 1) (* r6 y3))))))))))
